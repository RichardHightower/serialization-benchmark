OS:Linux
JVM:Oracle Corporation 1.7.0_55
CPU:null os-arch:null
Cores (incl HT):32
1.7.0_55-b13,Java HotSpot(TM) 64-Bit Server VM,Linux

================================
Test Class: FrequentPrimitives[]
================================
A array[10] of objects with a typical distribution of primitve fields: 2 short Strings, 3 boolean, 6 ints, 2 long, one double.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                          6838           5033          11871            836
Kryo 2.23                                    6283           5498          11781            708
Kryo 2.23 UnsafeIn/Output                    5699           5692          11391            848
JBoss-River                                 15459          15649          31108           1017
Java built in                               30942          13860          44802           1143
JBoss-Serializer                            19937          18548          38485           1143
</pre>


==============================================
Test Class: FrequentPrimitivesExternalizable[]
==============================================
A class with a typical distribution of primitve fields: 2 short Strings, 3 boolean, 6 ints, 2 long, one double. But implementing Externalizable


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                          5803           4943          10746            964
Kryo 2.23                                    6107           5844          11951            722
Kryo 2.23 UnsafeIn/Output                    5663           5261          10924            862
JBoss-River                                  9955           8142          18097            964
Java built in                               20108           7675          27783           1065
JBoss-Serializer                            15433          11167          26600           1065
</pre>


===============================
Test Class: FrequentCollections
===============================
Measures serialization of most popular collection classes. (HashMap and an ArrayList filled with Integer and Long).


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         42321          30292          72613           4671
Kryo 2.23                                   64708          50148         114856           4612
Kryo 2.23 UnsafeIn/Output                   59615          42283         101898           4443
JBoss-River                                 42305          47530          89835           4515
Java built in                              253272         350844         604116           8435
JBoss-Serializer                           345170         323894         669064           8435
</pre>


=============================
Test Class: LargeNativeArrays
=============================
measures performance serializing a large int array, a large long array and a large double array filled with random values. Note that random values destroy any value compression, so the increased size of kryo in this test will not be observable in most real world data.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         66079          45353         111432          31219
Kryo 2.23                                  109309          98202         207511          34934
Kryo 2.23 UnsafeIn/Output                   21048           6848          27896          31210
JBoss-River                                 67170          80080         147250          31339
Java built in                               64160          49216         113376          31403
JBoss-Serializer                            82960          80620         163580          31403
</pre>


=============================
Test Class: StringPerformance
=============================
measures serialization of mid size to very long Strings


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         63700          37576         101276          20020
Kryo 2.23                                  124934         108171         233105          17716
Kryo 2.23 UnsafeIn/Output                  127976         109159         237135          17716
JBoss-River                                105614          77775         183389          17820
Java built in                              144490         173458         317948          17931
JBoss-Serializer                           223550         109115         332665          17931
</pre>


======================
Test Class: Primitives
======================
A broad test of primitive values and specials such as Enums, EnumSets, Date, String, byte, short, int, .. Byte, Character; Short, Integer, .. 
 plus opaque private field with same name in a private subclass


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         22503          20345          42848           1458
Kryo 2.23 FAIL                                  0              0              0              0
Kryo 2.23 UnsafeIn/Output FAIL                  0              0              0              0
JBoss-River                                 90800          54808         145608           3048
Java built in                              222161          65353         287514           3614
JBoss-Serializer                           109976          90773         200749           3669
</pre>


====================
Test Class: Arrays[]
====================
Tests various arrays of int, Dimension, Date, Object. Nested arrays, multidimensional arrays.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                        148811         111217         260028          22764
Kryo 2.23                                  143003         134246         277249           9681
Kryo 2.23 UnsafeIn/Output                  109779         100650         210429          16471
JBoss-River                                131896         148563         280459          16691
Java built in                              318144         212664         530808          20774
JBoss-Serializer                           195323         229364         424687          20774
</pre>


=============================
Test Class: CommonCollections
=============================
In depth test of collections incl. collections of collections.
 (ArrayList, ArrayDeque, ConcurrentLinkedQueue, Vector, TreeSet, LinkedList, TreeMap, ConcurrentHashMap, Hashtable, HashMap). Note: has been modified to workaround Kryo-specific Issue.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                        122179          86168         208347           8502
Kryo 2.23                                  230082         106650         336732           8323
Kryo 2.23 UnsafeIn/Output                  228300         102976         331276           9408
JBoss-River                                145373         188394         333767           9886
Java built in                              433686         324122         757808          13172
JBoss-Serializer                           347576         320979         668555          13172
</pre>


==================
Test Class: Trader
==================
Measures serialization of a typical 'Enterprise-Object' using Value-Classes instead of primitive tpyes.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         99430         108926         208356           5192
Kryo 2.23                                  145219         149801         295020           5919
Kryo 2.23 UnsafeIn/Output                  136760         132101         268861           5928
JBoss-River                                313580         286985         600565           7210
Java built in                              378458         381447         759905          11075
JBoss-Serializer                           422162         406986         829148          11075
</pre>


=======================
Test Class: ManyClasses
=======================
Tests speed serializing a complex object graph of many different classes with few primitive fields.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                         11614           8542          20156           1000
Kryo 2.23                                   15353          11586          26939           1220
Kryo 2.23 UnsafeIn/Output                   15420          10857          26277           1283
JBoss-River                                 74653          39757         114410           2322
Java built in                              184685          46769         231454           3062
JBoss-Serializer                           104385          91601         195986           3062
</pre>


==============================
Test Class: ExternalizableTest
==============================
Performance of Externalizable objects.


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                        132522         176730         309252          10137
Kryo 2.23                                  141864         154460         296324           4733
Kryo 2.23 UnsafeIn/Output                  146433         139634         286067           7507
JBoss-River                                232086         232660         464746          13291
Java built in                              308255         308743         616998          14840
JBoss-Serializer                           262566         274554         537120          14840
</pre>


=====================
Test Class: BigObject
=====================
A bigger object graph consisting of some of the test objects at once


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                       6498928        6693129       13192057         432548
Kryo 2.23                                 8300319        7008580       15308899         322340
Kryo 2.23 UnsafeIn/Output                 8115270        6211020       14326290         396290
JBoss-River                              10217377       11351010       21568387         482426
Java built in                            12445001       15286713       27731714         588458
JBoss-Serializer                         14539353       14291443       28830796         588458
</pre>


========================
Test Class: HeavyNesting
========================
Heavily nested Objects


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                        102023         147101         249124           3747
Kryo 2.23                                  152619         165338         317957           5009
Kryo 2.23 UnsafeIn/Output                  161328         142603         303931           7076
JBoss-River                                348265         374299         722564           7115
Java built in                              291782         416936         708718          10182
JBoss-Serializer                           446710         404067         850777          10182
</pre>


========================
Test Class: MediaContent
========================
measures serializing the cyclefree object structure used by one of the most known encoding/decoding tests


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                          3875           3166           7041            316
Kryo 2.23                                    4011           3162           7173            286
Kryo 2.23 UnsafeIn/Output                    3825           2846           6671            307
JBoss-River                                 17568          12305          29873            694
Java built in                               61610          13835          75445            889
JBoss-Serializer                            24784          23538          48322            856
</pre>


===========================
Test Class: ShortRemoteCall
===========================
measures overhead of stream initialization+classname decoding. Only one very short object is serialized


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                           510            369            879             15
Kryo 2.23                                     645            547           1192             32
Kryo 2.23 UnsafeIn/Output                     703            532           1235             36
JBoss-River                                  4427           3183           7610            172
Java built in                               14910           2807          17717            220
JBoss-Serializer                             7621           5092          12713            220
</pre>


======================
Test Class: SmallThing
======================
only one int. benches pure init time


<pre style='background-color:#ccc;'>lib                                     read (ns)     write (ns)     total (ns)   size (bytes)
FST                                           309            309            618              2
Kryo 2.23                                     245            199            444              2
Kryo 2.23 UnsafeIn/Output                     241            194            435              5
JBoss-River                                  3340           2313           5653            102
Java built in                                7531           1625           9156            100
JBoss-Serializer                             4080           2731           6811            100
</pre>

